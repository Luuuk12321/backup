import tensorflow as tf
import moxing.tensorflow as mox

from tensorflow.python.keras.layers import Embedding, LSTM, Dense
from tensorflow.python.keras.layers import concatenate
from tensorflow.python.keras.losses import binary_crossentropy
from tensorflow.python.keras.models import Model
from tensorflow.python.keras.layers import Input


def input_fn(mode, **kwargs):
  main_input = tf.random_uniform(shape=(100,), minval=1, maxval=10000, dtype=tf.int32, name='main_input')
  auxiliary_input = tf.random_normal(shape=(5,), name='aux_input')
  main_labels = tf.random_uniform(shape=(1,))
  auxiliary_labels = tf.random_uniform(shape=(1,))
  return main_input, auxiliary_input, main_labels, auxiliary_labels


def model_core(main_input, auxiliary_input):
  x = Embedding(output_dim=512, input_dim=10000, input_length=100)(main_input)
  lstm_out = LSTM(32)(x)
  auxiliary_output = Dense(1, activation='sigmoid', name='aux_output')(lstm_out)

  x = concatenate([lstm_out, auxiliary_input])
  x = Dense(64, activation='relu')(x)
  x = Dense(64, activation='relu')(x)
  x = Dense(64, activation='relu')(x)
  main_output = Dense(1, activation='sigmoid', name='main_output')(x)

  return main_output, auxiliary_output


def model_fn(inputs, mode, **kwargs):
  main_input, auxiliary_input, main_labels, auxiliary_labels = inputs
  main_output, auxiliary_output = model_core(main_input, auxiliary_input)
  loss = 1.0 * binary_crossentropy(main_output, main_labels) + \
         0.2 * binary_crossentropy(auxiliary_output, auxiliary_labels)
  loss = tf.reduce_mean(loss)
  return mox.ModelSpec(loss=loss, log_info={'loss': loss})


def save_keras_model(save_path):
  keras_main_input = Input(shape=(100, ))
  keras_auxiliary_input = Input(shape=(5, ))
  keras_main_output, keras_auxiliary_output = model_core(keras_main_input, keras_auxiliary_input)
  keras_model = Model(inputs=[keras_main_input, keras_auxiliary_input],
                      outputs=[keras_main_output, keras_auxiliary_output])
  keras_model_json = keras_model.to_json()
  with tf.gfile.Open(save_path, 'wb') as f:
    f.write(keras_model_json)

if __name__ == '__main__':
  mox.run(input_fn=input_fn,
          model_fn=model_fn,
          optimizer_fn=mox.get_optimizer_fn('rmsprop', learning_rate=0.01),
          run_mode=mox.ModeKeys.TRAIN,
          batch_size=32,
          auto_batch=True,
          log_dir=None,
          max_number_of_steps=50,
          log_every_n_steps=10)
  save_keras_model(save_path='/tmp/delete_me/keras_model.json')
